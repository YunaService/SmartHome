{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","credits","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a82f1498.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**\r\n * UserStore\r\n */\r\n\r\n class UserStore{\r\n     constructor(){\r\n        extendObservable(this, {\r\n             loading: true,\r\n             isLoggedIn: false,\r\n             username: '',\r\n             credits: 0.0\r\n\r\n         })\r\n     }\r\n }\r\n\r\n export default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"inputField\">\r\n        <input\r\n          className=\"input\"\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={ (e) => this.props.onChange(e.target.value) }\r\n        >\r\n        </input>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"submitButton\">\r\n        <button \r\n          className=\"btn\"\r\n          disabled={this.props.disabled}\r\n          onClick={() => this.props.onClick() }\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val){\r\n    val = val.trim();\r\n    if(val.length > 12){\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState({\r\n      username: '',\r\n      password:'',\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n  async doLogin(){\r\n    if(!this.state.username) return;\r\n    if(!this.state.password) return;\r\n\r\n    this.setState({\r\n      buttonDisabled:true\r\n    })\r\n\r\n    try {\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }, body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      });\r\n\r\n      let result = await res.json();\r\n      if(result && result.success){\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      } else if(result && !result.success){\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"loginForm\">\r\n      \r\n        Login\r\n        <InputField\r\n        type='text'\r\n        placeholder='Username'\r\n        value={this.state.username ? this.state.username : ''}\r\n        onChange={ (val) => this.setInputValue('username', val) }\r\n        />\r\n        <InputField\r\n        type='password'\r\n        placeholder='Password'\r\n        value={this.state.password ? this.state.password : ''}\r\n        onChange={ (val) => this.setInputValue('password', val) }\r\n        />\r\n        <SubmitButton\r\n          text='Login'\r\n          disabled={this.state.buttonDisabled}\r\n          onClick={this.doLogin()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\n\r\nimport {observer} from 'mobx-react';\r\n\r\nimport UserStore from './stores/UserStore';\r\n\r\nimport LoginForm from './LoginForm';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  async componentDidMount(){\r\n    try{\r\n\r\n      let res = await fetch('/isLoggedIn', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      let result = await res.json();\r\n\r\n      if(result && result.success){\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n      }else{\r\n        UserStore.loading = false;\r\n        UserStore.isLoggedIn = false;\r\n        UserStore.username = '';\r\n      }\r\n\r\n\r\n    }catch(e){\r\n      UserStore.loading = false;\r\n      UserStore.isLoggedIn = false;\r\n      UserStore.username = '';\r\n    }\r\n  }\r\n  async doLogout(){\r\n    try{\r\n\r\n      let res = await fetch('/logout', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }\r\n      })\r\n      let result = await res.json();\r\n\r\n      if(result && result.success){\r\n        UserStore.isLoggedIn = false;\r\n        UserStore.username = '';\r\n      }\r\n      \r\n    }catch(e){\r\n      console.log(e)\r\n    }\r\n  }\r\n\r\n\r\n  render(){\r\n\r\n    if(UserStore.loading){\r\n      return (\r\n        <div className=\"app\">\r\n          <div className=\"container\">\r\n            Loading, please wait...\r\n          </div>\r\n        </div>\r\n      )\r\n    }else{\r\n      if(UserStore.isLoggedIn){\r\n        return (\r\n          <div className=\"app\">\r\n            <div className=\"container\">\r\n              Welcome {UserStore.username}!\r\n              <SubmitButton\r\n                text={'Log out'}\r\n                disabled={false}\r\n                onClick={ () => this.doLogout()}\r\n              />\r\n           </div>\r\n          </div>\r\n        )\r\n      }else{\r\n        return (\r\n          <div className=\"app\">\r\n            <div className=\"container\">\r\n              <LoginForm />\r\n           </div>\r\n          </div>\r\n          )\r\n\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default observer(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}