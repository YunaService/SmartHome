{"version":3,"sources":["stores/UserStore.js","InputField.js","SubmitButton.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","credits","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","doLogin","App","getCredits","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.639feb65.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\r\n\r\n/**\r\n * UserStore\r\n */\r\n\r\n class UserStore{\r\n     constructor(){\r\n        extendObservable(this, {\r\n             loading: true,\r\n             isLoggedIn: false,\r\n             username: '',\r\n             credits: 0.0\r\n\r\n         })\r\n     }\r\n }\r\n\r\n export default new UserStore();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"inputField\">\r\n        <input\r\n          className=\"input\"\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={ (e) => this.props.onChange(e.target.value) }\r\n        >\r\n        </input>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass SubmitButton extends React.Component {\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"submitButton\">\r\n        <button \r\n          className=\"btn\"\r\n          disabled={this.props.disabled}\r\n          onClick={() => this.props.onClick() }\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SubmitButton;\r\n","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './stores/UserStore';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val){\r\n    val = val.trim();\r\n    if(val.length > 12){\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState({\r\n      username: '',\r\n      password:'',\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n  async doLogin(){\r\n    if(!this.state.username) return;\r\n    if(!this.state.password) return;\r\n\r\n    this.setState({\r\n      buttonDisabled:true\r\n    })\r\n\r\n    try {\r\n      let res = await fetch('/login', {\r\n        method: 'post',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json'\r\n        }, body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      });\r\n\r\n      let result = await res.json();\r\n      if(result && result.success){\r\n        UserStore.isLoggedIn = true;\r\n        UserStore.username = result.username;\r\n        UserStore.credits = result.credits;\r\n      } else if(result && !result.success){\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n\r\n\r\n    } catch (e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"loginForm\">\r\n      \r\n        Login\r\n        <InputField\r\n        type='text'\r\n        placeholder='Username'\r\n        value={this.state.username ? this.state.username : ''}\r\n        onChange={ (val) => this.setInputValue('username', val) }\r\n        />\r\n        <InputField\r\n        type='password'\r\n        placeholder='Password'\r\n        value={this.state.password ? this.state.password : ''}\r\n        onChange={ (val) => this.setInputValue('password', val) }\r\n        />\r\n        <SubmitButton\r\n          text='Login'\r\n          disabled={this.state.buttonDisabled}\r\n          onClick={this.doLogin()}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\n\nimport {observer} from 'mobx-react';\n\nimport UserStore from './stores/UserStore';\n\nimport LoginForm from './LoginForm';\nimport InputField from './InputField';\nimport SubmitButton from './SubmitButton';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount(){\n    try{\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      let result = await res.json();\n\n      if(result && result.success){\n        UserStore.loading = false;\n        UserStore.isLoggedIn = true;\n        UserStore.username = result.username;\n        UserStore.credits = result.credits;\n      }else{\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n        UserStore.credits = 0.0;\n      }\n\n\n    }catch(e){\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n      UserStore.username = '';\n      UserStore.credits = 0.0;\n    }\n  }\n  async doLogout(){\n    try{\n\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      let result = await res.json();\n\n      if(result && result.success){\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n        UserStore.credits = 0.0;\n      }\n\n    }catch(e){\n      console.log(e)\n    }\n  }\n\n  async getCredits(){\n    try{\n\n      let res = await fetch('/getCredits', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n      let result = await res.json();\n\n      if(result && result.success){\n        UserStore.credits = result.credits;\n      }\n\n    }catch(e){\n      console.log(e)\n    }\n  }\n\n  render(){\n\n    if(UserStore.loading){\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            Loading, please wait...\n          </div>\n        </div>\n      )\n    }else{\n      if(UserStore.isLoggedIn){\n        return (\n          <div className=\"app\">\n            <div className=\"container\">\n              Welcome {UserStore.username}!\n              <SubmitButton\n                text={UserStore.credits + \" credits!\"}\n                disabled={false}\n                onClick={ () => this.getCredits()}\n              />\n              <SubmitButton\n                text={'Log out'}\n                disabled={false}\n                onClick={ () => this.doLogout()}\n              />\n           </div>\n          </div>\n        )\n      }else{\n        return (\n          <div className=\"app\">\n            <div className=\"container\">\n              <LoginForm />\n           </div>\n          </div>\n          )\n\n      }\n    }\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}